// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: auth.proto

package auth_client

import (
	"context"

	"github.com/HBUzxl/douyin-mall/auth/auth"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeliverTokenReq  = auth.DeliverTokenReq
	DeliverTokenResp = auth.DeliverTokenResp
	RefreshTokenReq  = auth.RefreshTokenReq

	Auth interface {
		// 分发token
		DeliverTokenByRpc(ctx context.Context, in *DeliverTokenReq, opts ...grpc.CallOption) (*DeliverTokenResp, error)
		// 刷新token
		RefreshTokenByRpc(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*DeliverTokenResp, error)
	}

	defaultAuth struct {
		cli zrpc.Client
	}
)

func NewAuth(cli zrpc.Client) Auth {
	return &defaultAuth{
		cli: cli,
	}
}

// 分发token
func (m *defaultAuth) DeliverTokenByRpc(ctx context.Context, in *DeliverTokenReq, opts ...grpc.CallOption) (*DeliverTokenResp, error) {
	client := auth.NewAuthClient(m.cli.Conn())
	return client.DeliverTokenByRpc(ctx, in, opts...)
}

// 刷新token
func (m *defaultAuth) RefreshTokenByRpc(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*DeliverTokenResp, error) {
	client := auth.NewAuthClient(m.cli.Conn())
	return client.RefreshTokenByRpc(ctx, in, opts...)
}
