// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Auth_DeliverTokenByRpc_FullMethodName = "/auth.Auth/DeliverTokenByRpc"
	Auth_RefreshTokenByRpc_FullMethodName = "/auth.Auth/RefreshTokenByRpc"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	// 分发token
	DeliverTokenByRpc(ctx context.Context, in *DeliverTokenReq, opts ...grpc.CallOption) (*DeliverTokenResp, error)
	// 刷新token
	RefreshTokenByRpc(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*DeliverTokenResp, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) DeliverTokenByRpc(ctx context.Context, in *DeliverTokenReq, opts ...grpc.CallOption) (*DeliverTokenResp, error) {
	out := new(DeliverTokenResp)
	err := c.cc.Invoke(ctx, Auth_DeliverTokenByRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) RefreshTokenByRpc(ctx context.Context, in *RefreshTokenReq, opts ...grpc.CallOption) (*DeliverTokenResp, error) {
	out := new(DeliverTokenResp)
	err := c.cc.Invoke(ctx, Auth_RefreshTokenByRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	// 分发token
	DeliverTokenByRpc(context.Context, *DeliverTokenReq) (*DeliverTokenResp, error)
	// 刷新token
	RefreshTokenByRpc(context.Context, *RefreshTokenReq) (*DeliverTokenResp, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) DeliverTokenByRpc(context.Context, *DeliverTokenReq) (*DeliverTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeliverTokenByRpc not implemented")
}
func (UnimplementedAuthServer) RefreshTokenByRpc(context.Context, *RefreshTokenReq) (*DeliverTokenResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshTokenByRpc not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_DeliverTokenByRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeliverTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DeliverTokenByRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_DeliverTokenByRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DeliverTokenByRpc(ctx, req.(*DeliverTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_RefreshTokenByRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).RefreshTokenByRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_RefreshTokenByRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).RefreshTokenByRpc(ctx, req.(*RefreshTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeliverTokenByRpc",
			Handler:    _Auth_DeliverTokenByRpc_Handler,
		},
		{
			MethodName: "RefreshTokenByRpc",
			Handler:    _Auth_RefreshTokenByRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
