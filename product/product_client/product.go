// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: product.proto

package product_client

import (
	"context"

	"github.com/HBUzxl/douyin-mall/product/product"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	CreateProductReq  = product.CreateProductReq
	CreateProductResp = product.CreateProductResp
	DeleteProductReq  = product.DeleteProductReq
	DeleteProductResp = product.DeleteProductResp
	GetProductReq     = product.GetProductReq
	GetProductResp    = product.GetProductResp
	Product           = product.Product
	UpdateProductReq  = product.UpdateProductReq
	UpdateProductResp = product.UpdateProductResp

	ProductZrpcClient interface {
		// 创建商品
		CreateProduct(ctx context.Context, in *CreateProductReq, opts ...grpc.CallOption) (*CreateProductResp, error)
		// 删除商品
		DeleteProduct(ctx context.Context, in *DeleteProductReq, opts ...grpc.CallOption) (*DeleteProductResp, error)
		// 获取商品
		GetProduct(ctx context.Context, in *GetProductReq, opts ...grpc.CallOption) (*GetProductResp, error)
		// 更新商品
		UpdateProduct(ctx context.Context, in *UpdateProductReq, opts ...grpc.CallOption) (*UpdateProductResp, error)
	}

	defaultProductZrpcClient struct {
		cli zrpc.Client
	}
)

func NewProductZrpcClient(cli zrpc.Client) ProductZrpcClient {
	return &defaultProductZrpcClient{
		cli: cli,
	}
}

// 创建商品
func (m *defaultProductZrpcClient) CreateProduct(ctx context.Context, in *CreateProductReq, opts ...grpc.CallOption) (*CreateProductResp, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.CreateProduct(ctx, in, opts...)
}

// 删除商品
func (m *defaultProductZrpcClient) DeleteProduct(ctx context.Context, in *DeleteProductReq, opts ...grpc.CallOption) (*DeleteProductResp, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.DeleteProduct(ctx, in, opts...)
}

// 获取商品
func (m *defaultProductZrpcClient) GetProduct(ctx context.Context, in *GetProductReq, opts ...grpc.CallOption) (*GetProductResp, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.GetProduct(ctx, in, opts...)
}

// 更新商品
func (m *defaultProductZrpcClient) UpdateProduct(ctx context.Context, in *UpdateProductReq, opts ...grpc.CallOption) (*UpdateProductResp, error) {
	client := product.NewProductClient(m.cli.Conn())
	return client.UpdateProduct(ctx, in, opts...)
}
